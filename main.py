import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from database import Database

BOT_TOKEN = '8252312259:AAH0BKm3oD7ws5da02kEhaj4-W1UrdrFq70'
ADMIN_ID = 420620196
PAYMENT_PROVIDER_TOKEN = 'TEST:YOUR_PAYMENT_TOKEN'
ADMIN_PASSWORD = 'admin123'  # –ó–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π

logging.basicConfig(level=logging.DEBUG)  # –ë—ñ–ª—å—à–µ –ª–æ–≥—ñ–≤ –¥–ª—è –ø–æ–º–∏–ª–æ–∫

db = Database()

class AdminLogin(StatesGroup):
    password = State()

class AdminAddCategory(StatesGroup):
    name = State()

class AdminAddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    category_id = State()
    stock = State()
    photo = State()

class OrderProcess(StatesGroup):
    delivery = State()
    address = State()
    payment = State()
    confirm = State()

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def get_main_keyboard():
    kb = [
        [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ üìã"), KeyboardButton(text="–ö–æ—à–∏–∫ üõí")],
        [KeyboardButton(text="–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üì¶"), KeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞ ‚ùì")],
        [KeyboardButton(text="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üîß"), KeyboardButton(text="Mini App üõçÔ∏è", web_app=WebAppInfo(url="http://localhost:8000/"))]  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ ngrok URL
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    db.add_user(user_id)
    await message.answer("–í—ñ—Ç–∞—é –≤ –º–∞–≥–∞–∑–∏–Ω—ñ! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=get_main_keyboard())

@dp.message(F.text == "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üîß")
async def admin_panel(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if db.is_admin(user_id) or user_id == ADMIN_ID:
        inline_kb = [
            [InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä ‚ûï", callback_data="admin_add_product")],
            [InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä ‚ùå", callback_data="admin_delete_product")],
            [InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é üìÅ", callback_data="admin_add_category")],
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ ID üëÄ", callback_data="admin_show_categories")],
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–º–æ–≤–ª–µ–Ω—å üìã", callback_data="admin_orders")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
        await message.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞!", reply_markup=keyboard)
    else:
        await state.set_state(AdminLogin.password)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º—ñ–Ω-–¥–æ—Å—Ç—É–ø—É:")

@dp.message(AdminLogin.password)
async def process_password(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        db.set_admin(message.from_user.id)
        await message.answer("–í–∏ —Ç–µ–ø–µ—Ä –∞–¥–º—ñ–Ω! üî•")
        await state.clear()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
        await state.clear()

@dp.callback_query(F.data == "admin_add_category")
async def add_category_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAddCategory.name)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:")

@dp.message(AdminAddCategory.name)
async def process_category_name(message: types.Message, state: FSMContext):
    try:
        db.add_category(message.text)
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ–¥–∞–Ω–æ! üìÅ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
    await state.clear()

@dp.callback_query(F.data == "admin_add_product")
async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminAddProduct.name)
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É:")

@dp.message(AdminAddProduct.name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminAddProduct.description)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å:")

@dp.message(AdminAddProduct.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminAddProduct.price)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É (—á–∏—Å–ª–æ):")

@dp.message(AdminAddProduct.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(AdminAddProduct.category_id)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–∑ '–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'):")
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ü—ñ–Ω–∞. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 100.50.")

@dp.message(AdminAddProduct.category_id)
async def process_category_id(message: types.Message, state: FSMContext):
    try:
        category_id = int(message.text)
        await state.update_data(category_id=category_id)
        await state.set_state(AdminAddProduct.stock)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥—ñ (—á–∏—Å–ª–æ):")
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1.")

@dp.message(AdminAddProduct.stock)
async def process_stock(message: types.Message, state: FSMContext):
    try:
        stock = int(message.text)
        await state.update_data(stock=stock)
        await state.set_state(AdminAddProduct.photo)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å URL —Ñ–æ—Ç–æ (–∞–±–æ 'none' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É):")
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 10.")

@dp.message(AdminAddProduct.photo)
async def process_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo = message.text if message.text != 'none' else None
    try:
        db.add_product(data['name'], data['description'], data['price'], data['category_id'], data['stock'], photo)
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ! ‚ûï")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}")
        await message.answer("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
    await state.clear()

@dp.callback_query(F.data == "admin_show_categories")
async def show_categories(callback: types.CallbackQuery):
    categories = db.get_categories()
    if not categories:
        await callback.message.answer("–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    text = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n" + "\n".join([f"ID {id}: {name}" for id, name in categories])
    await callback.message.answer(text)

@dp.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥ üìã")
async def catalog(message: types.Message):
    categories = db.get_categories()
    if not categories:
        await message.answer("–ù–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –î–æ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å. üìÅ")
        return
    inline_kb = [[InlineKeyboardButton(text=name, callback_data=f"cat_{id}")] for id, name in categories]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("cat_"))
async def show_products(callback: types.CallbackQuery):
    cat_id = int(callback.data.split("_")[1])
    products = db.get_products(cat_id)
    if not products:
        await callback.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.")
        return
    text = "–¢–æ–≤–∞—Ä–∏:\n"
    inline_kb = []
    for pid, name, desc, price, stock, photo in products:
        text += f"{name}: {price} –≥—Ä–Ω, –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ {stock}\n"
        inline_kb.append([InlineKeyboardButton(text=f"–î–æ–¥–∞—Ç–∏ {name} üõí", callback_data=f"add_{pid}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: types.CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    try:
        db.add_to_cart(user_id, product_id)
        await callback.answer("–î–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫! üõí")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∫–æ—à–∏–∫: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")

@dp.message(F.text == "–ö–æ—à–∏–∫ üõí")
async def cart(message: types.Message):
    user_id = message.from_user.id
    cart_items = db.get_cart(user_id)
    if not cart_items:
        await message.answer("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. üòî")
        return
    text = "–ö–æ—à–∏–∫:\n"
    total = 0
    for pid, name, price, qty, photo in cart_items:
        subtotal = price * qty
        text += f"{name} x{qty}: {subtotal} –≥—Ä–Ω\n"
        total += subtotal
    text += f"–í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω üí∞"
    inline_kb = [
        [InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç–∏ ‚úÖ", callback_data="order_start")],
        [InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç–∏ ‚ùå", callback_data="clear_cart")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    db.clear_cart(user_id)
    await callback.answer("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ! üóëÔ∏è")

@dp.callback_query(F.data == "order_start")
async def order_start(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(OrderProcess.delivery)
    inline_kb = [
        [InlineKeyboardButton(text="–ù–æ–≤–∞ –ü–æ—à—Ç–∞", callback_data="del_np")],
        [InlineKeyboardButton(text="–£–∫—Ä–ø–æ—à—Ç–∞", callback_data="del_up")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("del_"))
async def choose_delivery(callback: types.CallbackQuery, state: FSMContext):
    delivery = "–ù–æ–≤–∞ –ü–æ—à—Ç–∞" if callback.data == "del_np" else "–£–∫—Ä–ø–æ—à—Ç–∞"
    await state.update_data(delivery_name=delivery)
    await state.set_state(OrderProcess.address)
    await callback.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message(OrderProcess.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.set_state(OrderProcess.payment)
    inline_kb = [
        [InlineKeyboardButton(text="–ì–æ—Ç—ñ–≤–∫–æ—é", callback_data="pay_cash")],
        [InlineKeyboardButton(text="–û–Ω–ª–∞–π–Ω", callback_data="pay_online")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("pay_"))
async def choose_payment(callback: types.CallbackQuery, state: FSMContext):
    payment = "cash" if callback.data == "pay_cash" else "online"
    await state.update_data(payment=payment)
    data = await state.get_data()
    user_id = callback.from_user.id
    cart = db.get_cart(user_id)
    total = sum(price * qty for _, _, price, qty, _ in cart)
    cart_str = ', '.join([f"{name} x{qty}" for _, name, _, qty, _ in cart])
    text = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {cart_str}\n–î–æ—Å—Ç–∞–≤–∫–∞: {data['delivery_name']}\n–ê–¥—Ä–µ—Å–∞: {data['address']}\n–û–ø–ª–∞—Ç–∞: {payment}\n–í—Å—å–æ–≥–æ: {total} –≥—Ä–Ω\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?"
    inline_kb = [
        [InlineKeyboardButton(text="–¢–∞–∫ ‚úÖ", callback_data="confirm_order")],
        [InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data="cancel_order")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.update_data(total=total, cart=cart_str, cart_items=cart)

@dp.callback_query(F.data == "confirm_order")
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    try:
        order_id = db.create_order(user_id, data['cart'], data['total'], data['delivery_name'], data['payment'], data['address'])
        for pid, _, _, qty, _ in data['cart_items']:
            db.update_product_stock(pid, qty)
        db.clear_cart(user_id)
        if data['payment'] == "online":
            prices = [types.LabeledPrice(label="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è", amount=int(data['total'] * 100))]
            await bot.send_invoice(
                chat_id=user_id,
                title="–û–ø–ª–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                description="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä–∏",
                payload=f"order_{order_id}",
                provider_token=PAYMENT_PROVIDER_TOKEN,
                currency="UAH",
                prices=prices
            )
        else:
            await callback.message.answer(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ! –°—Ç–∞—Ç—É—Å: new üéâ")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    await state.clear()

@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. üòî")

@dp.pre_checkout_query()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment(message: types.Message):
    payload = message.successful_payment.invoice_payload
    order_id = int(payload.split("_")[1])
    db.update_order_status(order_id, "paid")
    await message.answer("–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è. üí•")

@dp.message(F.text == "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è üì¶")
async def my_orders(message: types.Message):
    user_id = message.from_user.id
    orders = db.get_orders(user_id)
    if not orders:
        await message.answer("–ó–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î. –ß–∞—Å –∫—É–ø–∏—Ç–∏ —â–æ—Å—å! üõçÔ∏è")
        return
    text = "–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
    for oid, _, products, total, delivery, payment, status, address in orders:
        text += f"#{oid}: {total} –≥—Ä–Ω, {delivery}, {payment}, —Å—Ç–∞—Ç—É—Å: {status}\n"
    await message.answer(text)

@dp.message(F.text == "–î–æ–ø–æ–º–æ–≥–∞ ‚ùì")
async def help(message: types.Message):
    await message.answer("–Ø–∫ –∫—É–ø–∏—Ç–∏: –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ üìã, –¥–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏, –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –∫–æ—à–∏–∫ üõí —ñ –æ—Ñ–æ—Ä–º—ñ—Ç—å.")

@dp.callback_query(F.data == "admin_delete_product")
async def admin_delete_product(callback: types.CallbackQuery):
    products = db.conn.cursor().execute("SELECT id, name FROM products").fetchall()
    if not products:
        await callback.message.answer("–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
        return
    inline_kb = [[InlineKeyboardButton(text=f"–í–∏–¥–∞–ª–∏—Ç–∏ {name} ‚ùå", callback_data=f"del_prod_{pid}")] for pid, name in products]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("del_prod_"))
async def confirm_delete(callback: types.CallbackQuery):
    prod_id = int(callback.data.split("_")[2])
    try:
        db.delete_product(prod_id)
        await callback.answer("–¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ! ‚ùå")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")

@dp.callback_query(F.data == "admin_orders")
async def admin_orders(callback: types.CallbackQuery):
    orders = db.get_all_orders()
    text = "–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
    if not orders:
        text += "–ù–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. üòî"
    for oid, user_id, products, total, delivery, payment, status, address in orders:
        text += f"#{oid} (user {user_id}): {total} –≥—Ä–Ω, —Å—Ç–∞—Ç—É—Å: {status} üì¶\n"
    inline_kb = [[InlineKeyboardButton(text=f"–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å #{oid} üîÑ", callback_data=f"status_{oid}")] for oid, *_ in orders]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)
    await callback.message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("status_"))
async def change_status(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    db.update_order_status(order_id, 'sent')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ 'sent'! üîÑ")

async def main():
    await dp.start_polling(bot, allowed_updates=["message", "callback_query", "pre_checkout_query", "successful_payment"])

if __name__ == '__main__':
    asyncio.run(main())